#sets starting temperature to 0, then
#loops through the list of temperatures and if a higher one is found, just
#replace the highest with new highest one. Return the highest temperature.
highestTemperature <- function(temperatures) {
highest <- 0
for(temp in temperatures){
if(temp > highest){
highest = temp
}
}
return (highest)
}
#Function to calculate average temperature.
#loops through the list of temperatures and sum the values together.
#then divide that sum with the length of the vector.
#Return that average temperature.
averageTemperature <- function(temperatures) {
totalTempSum <- 0
for(temp in temperatures){
totalTempSum <- (totalTempSum+temp)
}
average <- totalTempSum/length(temperatures)
return (average)
}
for(i in 1:3){
tempInCity()
}
#step1
#Function to calculate lowest temperature.
#sets a really high starting temperature, then
#loops through the list of temperatures and if a lower one is found, just
#replace the lowest with new lowest one. Return the lowest temperature.
lowestTemperature <- function(temperatures) {
lowest <- 999999
for(temp in temperatures){
if(temp < lowest){
lowest = temp
}
}
return (lowest)
}
#Function to calculate highest temperature.
#sets starting temperature to 0, then
#loops through the list of temperatures and if a higher one is found, just
#replace the highest with new highest one. Return the highest temperature.
highestTemperature <- function(temperatures) {
highest <- 0
for(temp in temperatures){
if(temp > highest){
highest = temp
}
}
return (highest)
}
#Function to calculate average temperature.
#loops through the list of temperatures and sum the values together.
#then divide that sum with the length of the vector.
#Return that average temperature.
averageTemperature <- function(temperatures) {
totalTempSum <- 0
for(temp in temperatures){
totalTempSum <- (totalTempSum+temp)
}
average <- totalTempSum/length(temperatures)
return (average)
}
tempInCity <- function(){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- 1:3
for(i in 1:3){
temp[i] <- (c(readline(prompt = "Enter temperature: ")))
}
sprintf("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
sprintf("Built in lowest temperature in %s is %s degrees", city, min(temp))
sprintf("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
sprintf("Built in highest temperature in %s is %s degrees", city, max(temp))
sprintf("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
sprintf("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
tempInCity()
}
averageTemperature <- function(temperatures) {
totalTempSum <- 0
for(temp in temperatures){
totalTempSum <- (totalTempSum+temp)
}
average <- as.integer(totalTempSum/length(temperatures))
return (average)
}
View(averageTemperature)
for(i in 1:3){
tempInCity()
}
averageTemperature <- function(temperatures) {
totalTempSum <- 0
for(temp in temperatures){
totalTempSum <- as.integer((totalTempSum+temp))
}
average <- (totalTempSum/length(temperatures))
return (average)
}
for(i in 1:3){
tempInCity()
}
tempInCity <- function(){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- 1:3
for(i in 1:3){
temp[i] <- as.integer((c(readline(prompt = "Enter temperature: "))))
}
sprintf("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
sprintf("Built in lowest temperature in %s is %s degrees", city, min(temp))
sprintf("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
sprintf("Built in highest temperature in %s is %s degrees", city, max(temp))
sprintf("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
sprintf("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
tempInCity()
}
View(tempInCity)
sprintf("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
print("test")
for(i in 1:3){
tempInCity()
}
printValues <- function(city,temp){
sprintf("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
sprintf("Built in lowest temperature in %s is %s degrees", city, min(temp))
sprintf("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
sprintf("Built in highest temperature in %s is %s degrees", city, max(temp))
sprintf("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
sprintf("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
tempInCity()
}
printValues <- function(city,temp){
cat("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
cat("Built in lowest temperature in %s is %s degrees", city, min(temp))
cat("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
cat("Built in highest temperature in %s is %s degrees", city, max(temp))
cat("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
cat("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
tempInCity()
}
tempInCity <- function(){
#city <- (c(readline(prompt = "Enter cityname: ")))
temp <- 1:3
for(i in 1:3){
temp[i] <- as.integer((c(readline(prompt = "Enter temperature: "))))
}
return(city,temp)
}
tempInCity <- function(){
#city <- (c(readline(prompt = "Enter cityname: ")))
temp <- 1:3
for(i in 1:3){
temp[i] <- as.integer((c(readline(prompt = "Enter temperature: "))))
}
return(temp)
}
for(i in 1:3){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- tempInCity()
cat("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
cat("Built in lowest temperature in %s is %s degrees", city, min(temp))
cat("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
cat("Built in highest temperature in %s is %s degrees", city, max(temp))
cat("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
cat("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- tempInCity()
sprintf("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
sprintf("Built in lowest temperature in %s is %s degrees", city, min(temp))
sprintf("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
sprintf("Built in highest temperature in %s is %s degrees", city, max(temp))
sprintf("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
sprintf("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- tempInCity()
print("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
sprintf("Built in lowest temperature in %s is %s degrees", city, min(temp))
sprintf("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
sprintf("Built in highest temperature in %s is %s degrees", city, max(temp))
sprintf("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
sprintf("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- tempInCity()
print("Own function lowest temperature in %s is %s degrees", city, lowestTemperature(temp))
sprintf("Built in lowest temperature in %s is %s degrees", city, min(temp))
sprintf("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
sprintf("Built in highest temperature in %s is %s degrees", city, max(temp))
sprintf("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
sprintf("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- tempInCity()
cat("Own function lowest temperature in ", city ," is ", lowestTemperature(temp))
sprintf("Built in lowest temperature in %s is %s degrees", city, min(temp))
sprintf("Own function highest temperature in %s is %s degrees", city, highestTemperature(temp))
sprintf("Built in highest temperature in %s is %s degrees", city, max(temp))
sprintf("Own function average temperature in %s is %s degrees", city, averageTemperature(temp))
sprintf("Built in average temperature in %s is %s degrees", city, mean(temp))
}
for(i in 1:3){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- tempInCity()
cat("Own function lowest temperature in ", city ," is ", lowestTemperature(temp), " degrees")
cat("Built in lowest temperature in ",city ," is ", city, min(temp)," degreees")
cat("Own function highest temperature in ", city ," is ", highestTemperature(temp), " degrees")
cat("Built in highes temperature in ",city ," is ", city, max(temp)," degreees")
cat("Own function average temperature in ", city ," is ", averageTemperature(temp), " degrees")
cat("Built in average temperature in ",city ," is ", city, mean(temp)," degreees")
}
for(i in 1:3){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- tempInCity()
cat("Own function lowest temperature in ", city ," is ", lowestTemperature(temp), " degrees\n")
cat("Built in lowest temperature in ",city ," is ", city, min(temp)," degreees\n")
cat("Own function highest temperature in ", city ," is ", highestTemperature(temp), " degrees\n")
cat("Built in highes temperature in ",city ," is ", city, max(temp)," degreees\n")
cat("Own function average temperature in ", city ," is ", averageTemperature(temp), " degrees\n")
cat("Built in average temperature in ",city ," is ", city, mean(temp)," degreees\n")
}
for(i in 1:3){
city <- (c(readline(prompt = "Enter cityname: ")))
temp <- tempInCity()
cat("Own function lowest temperature in", city ,"is", lowestTemperature(temp), "degrees\n")
cat("Built in lowest temperature in", city ,"is", city, min(temp),"degreees\n")
cat("Own function highest temperature in", city ,"is", highestTemperature(temp), "degrees\n")
cat("Built in highes temperature in", city ,"is", city, max(temp),"degreees\n")
cat("Own function average temperature in", city ,"is", averageTemperature(temp), "degrees\n")
cat("Built in average temperature in", city ,"is", city, mean(temp),"degreees\n")
}
#Function that takes user input for temperatures during 30 days.
tempInCity <- function(){
temp <- 1:30
for(i in 1:30){
temp[i] <- as.integer((c(readline(prompt = "Enter temperature: "))))
}
return(temp)
}
View(tempInCity)
library(ggplot2)
ggplot(data = kidney_disease,
mapping = aes(x = kidney_disease$age, y = kidney_disease$wc))+
geom_point()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod")
kidney_disease <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/kidney_disease.csv")
View(kidney_disease)
library(ggplot2)
ggplot(data = kidney_disease,
mapping = aes(x = kidney_disease$age, y = kidney_disease$wc))+
geom_point()
#Step 1 - Replace empty values with NA
kidney_disease[kidney_disease==""] <- NA
#Step 2 - Replace missing numerical values with mean value from the same column.
meanAge <- mean(kidney_disease$age, na.rm = TRUE)
kidney_disease$age[is.na(kidney_disease$age)]<-meanAge
meanBP <- mean(kidney_disease$bp, na.rm = TRUE)
kidney_disease$bp[is.na(kidney_disease$bp)]<-meanBP
meanSG <- mean(kidney_disease$sg, na.rm = TRUE)
kidney_disease$sg[is.na(kidney_disease$sg)]<-meanSG
meanAL <- mean(kidney_disease$al, na.rm = TRUE)
kidney_disease$al[is.na(kidney_disease$al)]<-meanAL
meanSU <- mean(kidney_disease$su, na.rm = TRUE)
kidney_disease$su[is.na(kidney_disease$su)]<-meanSU
meanBGR <- mean(kidney_disease$bgr, na.rm = TRUE)
kidney_disease$bgr[is.na(kidney_disease$bgr)]<-meanBGR
meanBU <- mean(kidney_disease$bu, na.rm = TRUE)
kidney_disease$bu[is.na(kidney_disease$bu)]<-meanBU
meanSC <- mean(kidney_disease$sc, na.rm = TRUE)
kidney_disease$sc[is.na(kidney_disease$sc)]<-meanSC
meanSOD <- mean(kidney_disease$sod, na.rm = TRUE)
kidney_disease$sod<-meanSOD
meanPOT <- mean(kidney_disease$pot, na.rm = TRUE)
kidney_disease$pot[is.na(kidney_disease$pot)]<-meanPOT
meanHemo <- mean(kidney_disease$hemo, na.rm = TRUE)
kidney_disease$hemo[is.na(kidney_disease$hemo)]<-meanHemo
meanPCV <- mean(as.numeric(kidney_disease$pcv), na.rm = TRUE)
kidney_disease$pcv[is.na(kidney_disease$pcv)]<-meanPCV
meanWC <- mean(as.numeric(kidney_disease$wc), na.rm = TRUE)
kidney_disease$wc[is.na(kidney_disease$wc)]<-meanWC
meanRC <- mean(as.numeric(kidney_disease$rc), na.rm = TRUE)
kidney_disease$rc[is.na(kidney_disease$rc)]<-meanRC
library(ggplot2)
ggplot(data = kidney_disease,
mapping = aes(x = kidney_disease$age, y = kidney_disease$wc))+
geom_point()
electronic.card.transactions.september.2022.csv <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/electronic-card-transactions-september-2022-csv.csv", header=FALSE)
View(electronic.card.transactions.september.2022.csv)
library(ggplot2)
ggplot(data = kidney_disease,
mapping = aes(x = electronic.card.transactions.september.2022.csv$v2, y = electronic.card.transactions.september.2022.csv$v3))+
geom_point()
library(ggplot2)
ggplot(data = electronic.card.transactions.september.2022.csv,
mapping = aes(x = electronic.card.transactions.september.2022.csv$v2, y = electronic.card.transactions.september.2022.csv$v3))+
geom_point()
library(ggplot2)
ggplot(data = electronic.card.transactions.september.2022.csv,
mapping = aes(x = electronic.card.transactions.september.2022.csv$v2, y = electronic.card.transactions.september.2022.csv$v3))+
geom_point(aes(colour = factor(cyl)))
library(ggplot2)
ggplot(data = electronic.card.transactions.september.2022.csv,
mapping = aes(x = electronic.card.transactions.september.2022.csv$v2, y = electronic.card.transactions.september.2022.csv$v3))+
geom_point(aes(size = qsec))
library(ggplot2)
ggplot(data = electronic.card.transactions.september.2022.csv,
mapping = aes(x = electronic.card.transactions.september.2022.csv$v2, y = electronic.card.transactions.september.2022.csv$v3))+
geom_point()
library(ggplot2)
ggplot(data = electronic.card.transactions.september.2022.csv,
mapping = aes(x = electronic.card.transactions.september.2022.csv$V2, y = electronic.card.transactions.september.2022.csv$V3))+
geom_point()
library(ggplot2)
ggplot(data = electronic.card.transactions.september.2022.csv,
mapping = aes(x = electronic.card.transactions.september.2022.csv$V2, y = electronic.card.transactions.september.2022.csv$V3))+
geom_point()
x <- rnorm(500)
y <- x + rnorm(500)
plot(x, y)
plot(my_ts, main = "Time series")
my_ts <- ts(matrix(rnorm(500), nrow = 500, ncol = 1),
start = c(1950, 1), frequency = 12)
plot(my_ts, main = "Time series")
horsePower <- factor(mtcars$hp)
plot(horsePower, main = "Barplot")
head(pressure)
plot(pressure, col="red")
plot(preasure, col="red", type ="l")
plot(pressure, col="red", type ="l")
plot(pressure, col="red", type ="l",
main = "The vapor pressure of mercury",
xlab = "Temperature (deg C)",
ylab = "mm of Hg")
mtcars
plot(mtcars$hp,mtcars$mpg)
plot(mtcars$mpg,mtcars$hp)
library(ggplot2)
ggplot(data = mtcars,
mapping = aes(x = mtcars$mpg, y = mtcars$hp))+
geom_point()
library(ggplot2)
ggplot(data = mtcars,
mapping = aes(x = mpg, y = hp))+
geom_bar(aes(x=mpg, y=hp, stat="identity"))+
facet_grid(~ tmp)
plot(mtcars$mpg,mtcars$hp, type = "h")
plot(mtcars$mpg,mtcars$hp, type = "h",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
plot(mtcars$mpg,mtcars$hp, type = "o",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
plot(mtcars$mpg,mtcars$hp, type = "b",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
plot(mtcars$mpg,mtcars$hp, type = "c",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
plot(mtcars$mpg,mtcars$hp, type = "c",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
plot(mtcars$mpg,mtcars$hp, type = "p",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
plot(mtcars$mpg,mtcars$hp, type = "S",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
plot(mtcars$mpg,mtcars$hp, type = "h",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
hist(mtcars$mpg,mtcars$hp)
plot(mtcars$mpg,mtcars$hp, type = "h",
main = "Relationship between Miles per Gallon and Horsepower",
xlab = "Miles per Gallon",
ylab = "Horsepower")
showProducts() <- function{
showProducts() <- function(){
cat("Products you can buy")
cat("Bread")
cat("Butter")
cat("Cheese")
cat("Ham")
cat("Eggs")
}
showProducts() <- function(){
cat("Products you can buy")
cat("Bread")
cat("Butter")
cat("Cheese")
cat("Ham")
cat("Eggs")
}
cat("Products you can buy")
cat("Bread")
cat("Butter")
cat("Cheese")
cat("Ham")
cat("Eggs")
cat("What do you want to buy?")
print("Products you can buy")
print("Bread")
print("Butter")
print("Cheese")
print("Ham")
print("Eggs")
print("What do you want to buy?")
cat("Products you can buy\nBread")
cat("Butter")
cat("Cheese")
cat("Ham")
cat("Eggs")
cat("What do you want to buy?")
cat("Products you can buy\nBread\nButter\nCheese\nHam\nEggs\nWhat do you want to buy?")
cat("Products you can buy\n1.Bread\n2.Butter\n3.Cheese\n4.Ham\n5.Eggs\nWhat do you want to buy?")
cat("Products you can buy\n1.Bread\n2.Butter\n3.Cheese\n4.Ham\n5.Eggs\n")
product <- as.integer(c(readline(prompt = "What do you want to buy? ")))
cat("Products you can buy\n1.Bread\n2.Butter\n3.Cheese\n4.Ham\n5.Eggs\n")
products <- as.integer(c(readline(prompt = "What do you want to buy? ")))
cat("Products you can buy\n1.Bread\n2.Butter\n3.Cheese\n4.Ham\n5.Eggs\n")
products <- as.integer(c(readline(prompt = "What do you want to buy? ")))
cat("Products you can buy\n1.Bread\n2.Butter\n3.Cheese\n4.Ham\n5.Eggs\n")
products <- as.integer(c(readline(prompt = "What do you want to buy? ")))
count <- as.integer(c(readline()))
products <- as.integer(c(readline(prompt = "What do you want to buy? ")))
showProducts() <- function(){
cat("Products you can buy\n1.Bread\n2.Butter\n3.Cheese\n4.Ham\n5.Eggs\n")
}
showProducts <- function(){
cat("Products you can buy\n1.Bread\n2.Butter\n3.Cheese\n4.Ham\n5.Eggs\n")
}
showProducts()
products <- as.integer(c(readline(prompt = "What do you want to buy? ")))
products <- c(askPurchase)
askPurchase <- function(){
product <- as.integer(c(readline(prompt = "What do you want to buy? ")))
return(product)
}
showProducts()
products <- c(askPurchase)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
sum <- sum + (count[i]*productPrices[products[i]]-1)
sum <- sum + (count[i]*productPrices[products[i]]-1)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/CashRegister.R")
kidney_disease <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/kidney_disease.csv")
View(kidney_disease)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/DataPreProcessing.R")
kidney_disease <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/kidney_disease.csv")
View(kidney_disease)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Lindas skola/Data Scientist/R-programmering/Final submission/Kod/DataPreProcessing.R")
plot(mtcars$mpg,mtcars$hp)
